/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        shiva_ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "hold_tap";
            bindings = <&mo>, <&kt>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            flavor = "hold-preferred";
        };

        bspc_delete: bspc_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LSFT)>;
        };

        apost_l_curly: apost_l_curly {
            compatible = "zmk,behavior-mod-morph";
            label = "APOST_L_CURLY";
            bindings = <&kp SEMICOLON>, <&kp LEFT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LSFT)>;
        };

        quote_r_curly: quote_r_curly {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTE_R_CURLY";
            bindings = <&kp SQT>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LSFT)>;
        };

        h_l_prts: h_l_prts {
            compatible = "zmk,behavior-mod-morph";
            label = "H_L_PRTS";
            bindings = <&kp H>, <&kp LEFT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LSFT)>;
        };

        j_r_prts: j_r_prts {
            compatible = "zmk,behavior-mod-morph";
            label = "J_R_PRTS";
            bindings = <&kp J>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LSFT)>;
        };

        k_l_brckt: k_l_brckt {
            compatible = "zmk,behavior-mod-morph";
            label = "K_L_BRCKT";
            bindings = <&kp K>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LSFT)>;
        };

        l_r_brckt: l_r_brckt {
            compatible = "zmk,behavior-mod-morph";
            label = "L_R_BRCKT";
            bindings = <&kp L>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LSFT)>;
        };

        u_udrscr: u_udrscr {
            compatible = "zmk,behavior-mod-morph";
            label = "U_UDRSCR";
            bindings = <&kp U>, <&kp UNDER>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LSFT)>;
        };

        i_minus: i_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "I_MINUS";
            bindings = <&kp I>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LSFT)>;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp TILDE       &kp NUMBER_1  &kp N2  &kp N3        &kp N4        &kp N5                                        &kp N6     &kp N7     &kp N8        &kp N9      &kp N0          &kp BACKSPACE
&kp TAB         &kp Q         &kp W   &kp E         &kp R         &kp T                                         &kp Y      &u_udrscr  &i_minus      &kp O       &kp P           &kp EQUAL
&kp ESC         &kp A         &kp S   &kp D         &kp F         &kp G                                         &h_l_prts  &j_r_prts  &k_l_brckt    &l_r_brckt  &apost_l_curly  &quote_r_curly
&kp LEFT_SHIFT  &kp Z         &kp X   &kp C         &kp V         &kp B             &kp BACKSLASH    &kp GRAVE  &kp N      &kp M      &kp COMMA     &kp DOT     &kp FSLH        &kp RSHFT
                                      &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp SPACE        &kp ENTER  &mo 1      &mo 2      &kp LEFT_WIN
            >;
        };

        right_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "RIG";
            bindings = <
&trans  &trans  &trans  &trans   &trans  &trans                    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE  &kp C_PREVIOUS  &kp C_NEXT  &kp C_PLAY_PAUSE
&trans  &trans  &trans  &trans   &trans  &trans                    &trans        &trans        &trans      &trans          &trans      &trans
&trans  &trans  &trans  &kp DEL  &trans  &trans                    &kp LEFT      &kp DOWN      &kp UP      &kp RIGHT       &trans      &trans
&trans  &trans  &trans  &trans   &trans  &trans  &trans    &trans  &trans        &trans        &trans      &trans          &trans      &trans
                        &trans   &trans  &trans  &trans    &trans  &trans        &trans        &trans
            >;

            label = "RIG";
        };

        tri_layer {
            bindings = <
&trans  &trans  &trans   &trans   &trans   &trans                                      &trans        &trans  &trans  &trans  &trans  &trans
&trans  &kp F1  &kp F2   &kp F3   &kp F4   &bt BT_SEL 0                                &bt BT_SEL 3  &trans  &trans  &trans  &trans  &trans
&trans  &kp F5  &kp F6   &kp F7   &kp F8   &bt BT_SEL 1                                &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &bt BT_SEL 2  &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans  &trans  &trans  &trans  &tog 3
                         &trans   &trans   &trans        &trans        &trans          &trans        &trans  &trans
            >;

            label = "TRI";
        };

        Dota2 {
            bindings = <
&kp ESCAPE  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                            &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
