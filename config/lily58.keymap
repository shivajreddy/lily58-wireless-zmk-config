/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        bspc_delete: bspc_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        h_minus: h_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "H_MINUS";
            bindings = <&kp H>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        j_l_prts: j_l_prts {
            compatible = "zmk,behavior-mod-morph";
            label = "J_L_PRTS";
            bindings = <&kp J>, <&kp LEFT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        k_r_parnts: k_r_parnts {
            compatible = "zmk,behavior-mod-morph";
            label = "K_R_PARNTS";
            bindings = <&kp K>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        l_l_brckt: l_l_brckt {
            compatible = "zmk,behavior-mod-morph";
            label = "L_L_BRCKT";
            bindings = <&kp L>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        semi_r_brack: semi_r_brack {
            compatible = "zmk,behavior-mod-morph";
            label = "SEMI_R_BRACK";
            bindings = <&kp SEMICOLON>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "hold_tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <150>;
            tapping-term-ms = <220>;
            flavor = "tap-preferred";
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&none  &kp NUMBER_1  &kp N2  &kp N3  &kp N4  &kp N5                               &kp N6            &kp N7        &kp N8     &kp N9      &kp N0         &none
&none  &kp Q         &kp W   &kp E   &kp R   &kp T                                &kp Y             &kp U         &kp I      &kp O       &kp P          &none
&none  &kp A         &kp S   &kp D   &kp F   &kp G                                &kp H             &kp J         &kp K      &kp L       &kp BACKSPACE  &none
&none  &kp Z         &kp X   &kp C   &kp V   &kp B   &none        &none           &kp N             &kp M         &kp COMMA  &kp PERIOD  &kp ENTER      &none
                             &none   &mo 2   &mo 1   &kp SPACE    &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &none
            >;
        };

        VIM {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "RIG";
            bindings = <
&none  &trans      &trans  &trans  &trans  &trans                          &kp C_VOL_DN  &kp C_VOL_UP          &kp C_PP               &trans            &kp C_MUTE         &none
&none  &kp ESCAPE  &trans  &trans  &trans  &trans                          &kp MINUS     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &none
&none  &kp TAB     &trans  &trans  &trans  &trans                          &kp EQUAL     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SINGLE_QUOTE  &kp SEMICOLON      &none
&none  &trans      &trans  &trans  &trans  &trans        &none     &none   &kp LEFT      &kp DOWN              &kp UP                 &kp RIGHT         &kp BACKSLASH      &trans
                           &trans  &trans  &kp LEFT_WIN  &trans    &trans  &trans        &trans                &trans
            >;

            label = "RIG";
        };

        FN {
            bindings = <
&none  &trans  &trans   &trans   &trans   &trans                          &trans        &trans  &trans  &trans  &trans  &none
&none  &kp F1  &kp F2   &kp F3   &kp F4   &bt BT_SEL 0                    &bt BT_SEL 3  &trans  &trans  &trans  &trans  &none
&none  &kp F5  &kp F6   &kp F7   &kp F8   &bt BT_SEL 1                    &bt BT_SEL 4  &trans  &trans  &trans  &trans  &none
&none  &kp F9  &kp F10  &kp F11  &kp F12  &bt BT_SEL 2  &none     &none   &bt BT_CLR    &trans  &trans  &trans  &trans  &none
                        &trans   &trans   &trans        &trans    &trans  &trans        &trans  &trans
            >;

            label = "TRI";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
